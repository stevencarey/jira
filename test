#!/usr/bin/env python
"""
The main purpose of this file is to run tox only with the current existing python interpretors.
"""
import os
import sys
import logging

if sys.version[0] == '2':
    reload(sys)  # Reload does the trick!
    sys.setdefaultencoding('UTF8')

if __name__ == "__main__":
        logging.getLogger("jira").addHandler(NullHandler())
        logging.getLogger("urllib3").setLevel(logging.FATAL)
        logging.getLogger("requests").setLevel(logging.FATAL)

        # now we'll detect which python interpretors we have on this machine and run the tests for all of them
        #'python2.5':'py25',
        known_pys = {  'python2.6':'py26', 'python2.7':'py27', 'python3.3':'py33', 'python3.4':'py34', 'python3.5':'py35' } # ,'python3':'py3', 'python3.2':'py32', 'python4':'py4'}
        #known_pys = { 'python2.7':'py27' } # ,'python3':'py3', 'python3.2':'py32', 'python4':'py4'}

        detected_pys = set()
        for known_py in known_pys:
            if os.system("which %s >/dev/null" % known_py) == 0:
                detected_pys.add(known_pys[known_py])
        detected_pys.add('docs')

        #os.system("python setup.py test")
        #pip_cmd = "pip install --user --upgrade"
        # --user
        pip_cmd = "pip -q install --user" # "--exists-action w" not existing everywhere
        cmds = [
             #"%s -r requirements.txt" % pip_cmd,
             #"%s -r requirements-dev.txt" % pip_cmd,
             #"%s -r requirements-opt.txt || echo 'Warning: optional requirements install failed.'" % pip_cmd,
             "python -m autopep8 --recursive --ignore=E501 -i *.py tests/*.py jira/*.py examples/*.py || echo 'Warning: autopep8 failed'",
             "python -m tox -e %s" % ",".join(detected_pys)]
        if sys.platform == 'darwin':
            if os.system('atlas-version'):
                logging.warning('Atlassian SDK executables not found in path, we will try to install them.')
            cmds.append('brew tap atlassian/tap')
            cmds.append('brew install atlassian/tap/atlassian-plugin-sdk')
        for cmd in cmds:
            os.environ['CI_JIRA_URL']='http://127.0.0.1:2990/jira'
            if os.system(cmd) != 0:
                print("ERROR:	Command `%s` failed, testing stopped here." % cmd)
                sys.exit(6)

